DecayConstant <- function (A) {
if(!is.matrix(A)) return("A must be a matrix")
n <- length(A[1,])
if(n != length(A[,1])) return("only sqare matrix allowed")
maxIndegree <- 0
maxOutdegree <- 0
for(i in 1:n) {
indegree <- 0
outdegree <- 0
for(j in 1:n) {
indegree <- indegree + A[j,i]
outdegree <- indegree + A[i,j]
}
maxIndegree <- max(indegree, maxIndegree)
maxOutdegree <- max(outdegree, maxOutdegree)
}
return(1/min(maxIndegree, maxOutdegree))
}
NeumannKernelMatrix <- function (A, diffusionFactor) {
if(!is.matrix(A)) {
print("A must be a matrix")
return(NULL)
}
n <- length(A[1,])
if(n != length(A[,1])) {
print("only sqare matrix allowed")
return(NULL)
}
AT <- t(A)
K <- AT %*% A
T <- A %*% AT
I <- diag(n)
Kby <- K %*% solve(I - diffusionFactor*K)
Tby <- T %*% solve(I - diffusionFactor*T)
return(list("Kby"=as.matrix(Kby), "Tby"=as.matrix(Tby)))
}
n
library(igraph)
adjacency_matrix <- as.matrix(
read.table("data/webPageLinks.txt", header=T, sep="	", row.names = 1))
setwd("~/GitHub/xarxessocialspractica3/XarxesSocialsPractica3")
adjacency_matrix <- as.matrix(
read.table("data/webPageLinks.txt", header=T, sep="	", row.names = 1))
adjacency_matrix <- as.matrix(
read.table("data/webPageLinks.txt", header=T, sep="	", row.names = 1))
setwd("~/GitHub/xarxessocialspractica3/XarxesSocialsPractica3")
adjacency_matrix <- as.matrix(
read.table("data/webPageLinks.txt", header=T, sep="	", row.names = 1))
adjacency_matrix <- as.matrix(
read.table("webPageLinks.txt", header=T, sep="	", row.names = 1))
decayConstant <- DecayConstant(adjacency_matrix)
if(is.numeric(decayConstant)){
print(paste("choose between 0 and", decayConstant, sep = " "))
} else {
decayConstant
}
?NeumannKernelMatrix
result <- NeumannKernelMatrix(adjacency_matrix, decayConstant)
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
#plot(KbyGraph, vertex.label=NA)
#plot(TbyGraph, vertex.label=NA)
hub <- hub_score(adjacency_matrix, weights = NA)
result <- NeumannKernelMatrix(adjacency_matrix, 0) # Choosing a value of γ = 0 results in the co-citation matrix
result <- NeumannKernelMatrix(adjacency_matrix, 0) # Choosing a value of γ = 0 results in the co-citation matrix
KbyGraph <- graph.adjacency(result$Kby)
plot(KbyGraph, vertex.label=NA)
KbyGraph <- graph.adjacency(result$Kby)
plot(KbyGraph, vertex.label=NA)
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
plot(KbyGraph, vertex.label=NA)
plot(TbyGraph, vertex.label=NA)
print(paste(result))
print(paste(head(result)))
hub <- names(sort(hub_score(adjacency_matrix, weights = NA)))
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
hub <- hub_score(adjacency_matrix, weights = NA)$vector
hub <- hub_score(grap.adjacency(adjacency_matrix, weights = NA)$vector
authority <- authority.score(adjacency_matrix, weights = NA)&vector
hits.graph <- graph.adjacency(adjacency_matrix)
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score((hits.graph, weights = NA)$vector
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub.score((hits.graph, weights = NA)$vector
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score(hits.graph, weights = NA)$vector
authority <- authority_score(hits.graph, weights = NA)&vector
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score(hits.graph, weights = NA)$vector
authority <- authority_score(hits.graph, weights = NA)$vector
result <- NeumannKernelMatrix(adjacency_matrix, decayConstant)
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
#plot(KbyGraph, vertex.label=NA)
#plot(TbyGraph, vertex.label=NA)
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score(hits.graph, weights = NA)$vector
authority <- authority_score(hits.graph, weights = NA)$vector
hub.final <- names(sort(hub, decreasing = TRUE)[1:Op1PercentVertex])
Op1PercentVertex <- round(nVertex * 0.001, digits = 0)
hits.graph <- graph.adjacency(adjacency_matrix)
nVertex <- vcount(hits.graph)
Op1PercentVertex <- round(hits.graph * 0.001, digits = 0)
hub.final <- names(sort(hub, decreasing = TRUE)[1:10])
hub.final
authority.final <- names(sort(authority, decreasing = TRUE)[1:10])
authority.final
hub.final
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = T)[1:10])
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = T)[1:10])
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = T)[1:5])
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = T))
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = TRUE)[1:10])
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
KbyGraph.ybig <- names(sort(KbyGraph, decreasing = TRUE)[1:10])
KbyGraph <- names(sort(graph.adjacency(result$Kby)))
KbyGraph
sort(KbyGraph, decreasing = T)
KbyGraph
hub.final
authority.final
TbyGraph
hub.final
hub.final
authority.final
result <- NeumannKernelMatrix(adjacency_matrix, decayConstant)
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
KbyGraph
TbyGraph
#plot(KbyGraph, vertex.label=NA)
#plot(TbyGraph, vertex.label=NA)
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score(hits.graph, weights = NA)$vector
authority <- authority_score(hits.graph, weights = NA)$vector
hub.final <- names(sort(hub, decreasing = TRUE)[1:10])
authority.final <- names(sort(authority, decreasing = TRUE)[1:10])
hub.final
authority.final
result <- NeumannKernelMatrix(adjacency_matrix, decayConstant)
KbyGraph <- graph.adjacency(result$Kby)
TbyGraph <- graph.adjacency(result$Tby)
KbyGraph
TbyGraph
#plot(KbyGraph, vertex.label=NA)
#plot(TbyGraph, vertex.label=NA)
hits.graph <- graph.adjacency(adjacency_matrix)
hub <- hub_score(hits.graph, weights = NA)$vector
authority <- authority_score(hits.graph, weights = NA)$vector
hub.final <- names(sort(hub, decreasing = TRUE)[1:10])
authority.final <- names(sort(authority, decreasing = TRUE)[1:10])
hub.final
authority.final
result2 <- NeumannKernelMatrix(adjacency_matrix, 0) # Choosing a value of γ = 0 results in the co-citation matrix
KbyGraph2 <- graph.adjacency(result2$Kby)
TbyGraph2 <- graph.adjacency(result2$Tby)
A <- adjacency_matrix
rm(A)
Adj <- adjacency_matrix
K <- t(Adj) %*% Adj
T <- Adj %*% t(Adj)
K.graph <- graph.adjacency(K)
T.graph <- graph.adjacency(T)
K.graph
T.graph
K.graph
T.graph
TbyGraph2
KbyGraph2
K.graph
KbyGraph2
TbyGraph2
T.graph
T.graph
TbyGraph2
